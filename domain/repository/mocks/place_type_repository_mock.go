// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/place_type.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/risk-place-angola/backend-risk-place/domain/entities"
)

// MockPlaceTypeRepository is a mock of PlaceTypeRepository interface.
type MockPlaceTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceTypeRepositoryMockRecorder
}

// MockPlaceTypeRepositoryMockRecorder is the mock recorder for MockPlaceTypeRepository.
type MockPlaceTypeRepositoryMockRecorder struct {
	mock *MockPlaceTypeRepository
}

// NewMockPlaceTypeRepository creates a new mock instance.
func NewMockPlaceTypeRepository(ctrl *gomock.Controller) *MockPlaceTypeRepository {
	mock := &MockPlaceTypeRepository{ctrl: ctrl}
	mock.recorder = &MockPlaceTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceTypeRepository) EXPECT() *MockPlaceTypeRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPlaceTypeRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlaceTypeRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlaceTypeRepository)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockPlaceTypeRepository) FindAll() ([]*entities.PlaceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entities.PlaceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPlaceTypeRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPlaceTypeRepository)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockPlaceTypeRepository) FindByID(id string) (*entities.PlaceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entities.PlaceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPlaceTypeRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPlaceTypeRepository)(nil).FindByID), id)
}

// Save mocks base method.
func (m *MockPlaceTypeRepository) Save(entity *entities.PlaceType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockPlaceTypeRepositoryMockRecorder) Save(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPlaceTypeRepository)(nil).Save), entity)
}

// Update mocks base method.
func (m *MockPlaceTypeRepository) Update(entity *entities.PlaceType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPlaceTypeRepositoryMockRecorder) Update(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlaceTypeRepository)(nil).Update), entity)
}
