// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/risk_type_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/risk-place-angola/backend-risk-place/domain/entities"
)

// MockRiskTypeRepository is a mock of RiskTypeRepository interface.
type MockRiskTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRiskTypeRepositoryMockRecorder
}

// MockRiskTypeRepositoryMockRecorder is the mock recorder for MockRiskTypeRepository.
type MockRiskTypeRepositoryMockRecorder struct {
	mock *MockRiskTypeRepository
}

// NewMockRiskTypeRepository creates a new mock instance.
func NewMockRiskTypeRepository(ctrl *gomock.Controller) *MockRiskTypeRepository {
	mock := &MockRiskTypeRepository{ctrl: ctrl}
	mock.recorder = &MockRiskTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRiskTypeRepository) EXPECT() *MockRiskTypeRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRiskTypeRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRiskTypeRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRiskTypeRepository)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockRiskTypeRepository) FindAll() ([]*entities.RiskType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entities.RiskType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRiskTypeRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRiskTypeRepository)(nil).FindAll))
}

// FindById mocks base method.
func (m *MockRiskTypeRepository) FindById(id string) (*entities.RiskType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*entities.RiskType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRiskTypeRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRiskTypeRepository)(nil).FindById), id)
}

// Save mocks base method.
func (m *MockRiskTypeRepository) Save(riskType entities.RiskType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", riskType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRiskTypeRepositoryMockRecorder) Save(riskType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRiskTypeRepository)(nil).Save), riskType)
}

// Update mocks base method.
func (m *MockRiskTypeRepository) Update(riskType entities.RiskType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", riskType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRiskTypeRepositoryMockRecorder) Update(riskType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRiskTypeRepository)(nil).Update), riskType)
}
