// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/risk_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/risk-place-angola/backend-risk-place/domain/entities"
)

// MockRiskRepository is a mock of RiskRepository interface.
type MockRiskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRiskRepositoryMockRecorder
}

// MockRiskRepositoryMockRecorder is the mock recorder for MockRiskRepository.
type MockRiskRepositoryMockRecorder struct {
	mock *MockRiskRepository
}

// NewMockRiskRepository creates a new mock instance.
func NewMockRiskRepository(ctrl *gomock.Controller) *MockRiskRepository {
	mock := &MockRiskRepository{ctrl: ctrl}
	mock.recorder = &MockRiskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRiskRepository) EXPECT() *MockRiskRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRiskRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRiskRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRiskRepository)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockRiskRepository) FindAll() ([]*entities.Risk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entities.Risk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRiskRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRiskRepository)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockRiskRepository) FindByID(id string) (*entities.Risk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entities.Risk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRiskRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRiskRepository)(nil).FindByID), id)
}

// Save mocks base method.
func (m *MockRiskRepository) Save(risk *entities.Risk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", risk)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRiskRepositoryMockRecorder) Save(risk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRiskRepository)(nil).Save), risk)
}

// Update mocks base method.
func (m *MockRiskRepository) Update(risk *entities.Risk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", risk)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRiskRepositoryMockRecorder) Update(risk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRiskRepository)(nil).Update), risk)
}
