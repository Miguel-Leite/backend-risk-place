// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/place_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/risk-place-angola/backend-risk-place/domain/entities"
)

// MockPlaceRepository is a mock of PlaceRepository interface.
type MockPlaceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceRepositoryMockRecorder
}

// MockPlaceRepositoryMockRecorder is the mock recorder for MockPlaceRepository.
type MockPlaceRepositoryMockRecorder struct {
	mock *MockPlaceRepository
}

// NewMockPlaceRepository creates a new mock instance.
func NewMockPlaceRepository(ctrl *gomock.Controller) *MockPlaceRepository {
	mock := &MockPlaceRepository{ctrl: ctrl}
	mock.recorder = &MockPlaceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceRepository) EXPECT() *MockPlaceRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPlaceRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlaceRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlaceRepository)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockPlaceRepository) FindAll() ([]*entities.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entities.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPlaceRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPlaceRepository)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockPlaceRepository) FindByID(id string) (*entities.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entities.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPlaceRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPlaceRepository)(nil).FindByID), id)
}

// Save mocks base method.
func (m *MockPlaceRepository) Save(place *entities.Place) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", place)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockPlaceRepositoryMockRecorder) Save(place interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPlaceRepository)(nil).Save), place)
}

// Update mocks base method.
func (m *MockPlaceRepository) Update(place *entities.Place) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", place)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPlaceRepositoryMockRecorder) Update(place interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlaceRepository)(nil).Update), place)
}
